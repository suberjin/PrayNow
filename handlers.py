from aiogram import Bot, Router, F, Dispatcher
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
import logging
from services import insert_prayer, fetch_prayers, update_prayer, delete_prayer, get_prayer_by_id, fetch_all_prayers, count_all_prayers
from database import get_all_categories, get_category_by_id
from datetime import datetime

# Get logger
logger = logging.getLogger(__name__)

# Create router instance
router = Router()

# Define the PrayerStates class
class PrayerStates(StatesGroup):
    selecting_category = State()
    expecting_prayer = State()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
async def show_main_menu(message_or_callback):
    from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text='–ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –º–æ–ª–∏—Ç–≤—É', callback_data='send_pray')],
        [InlineKeyboardButton(text='–ü–æ–∫–∞–∑–∞—Ç–∏ –≤—Å—ñ –º–æ–ª–∏—Ç–≤–∏', callback_data='show_all_prayers')],
        [InlineKeyboardButton(text='–ü–æ–∫–∞–∑–∞—Ç–∏ –º–æ—ó –º–æ–ª–∏—Ç–≤–∏', callback_data='show_my_prayers')],
    ])
    
    if isinstance(message_or_callback, Message):
        await message_or_callback.answer("–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é:", reply_markup=keyboard)
    else:  # CallbackQuery
        await message_or_callback.message.answer("–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é:", reply_markup=keyboard)
        await message_or_callback.answer()

@router.message(Command("start"))
async def start_handler(message: Message):
    from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text='–ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –º–æ–ª–∏—Ç–≤—É', callback_data='send_pray')],
        [InlineKeyboardButton(text='–ü–æ–∫–∞–∑–∞—Ç–∏ –≤—Å—ñ –º–æ–ª–∏—Ç–≤–∏', callback_data='show_all_prayers')],
        [InlineKeyboardButton(text='–ü–æ–∫–∞–∑–∞—Ç–∏ –º–æ—ó –º–æ–ª–∏—Ç–≤–∏', callback_data='show_my_prayers')],
    ])
    await message.answer("–í—ñ—Ç–∞—é! –Ø –±–æ—Ç –¥–ª—è –∑–∞–ø–∏—Å—É –≤–∞—à–∏—Ö –º–æ–ª–∏—Ç–æ–≤.", reply_markup=keyboard)

@router.callback_query(F.data == "main_menu")
async def main_menu_callback(callback_query: CallbackQuery, state: FSMContext):
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
    await state.clear()
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    await show_main_menu(callback_query)

@router.callback_query(F.data == "send_pray")
async def process_callback_send_pray(callback_query: CallbackQuery, state: FSMContext):
    from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
    
    await callback_query.answer(show_alert=False)
    
    # Get all categories
    categories = get_all_categories()
    
    # Create keyboard with categories
    buttons = []
    for category_id, category_name in categories:
        buttons.append([InlineKeyboardButton(text=category_name, callback_data=f'category_{category_id}')])
    
    # Add back button
    buttons.append([InlineKeyboardButton(text='üè† –î–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é', callback_data='main_menu')])
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    
    await callback_query.message.answer("–û–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é –º–æ–ª–∏—Ç–≤–∏:", reply_markup=keyboard)
    await state.set_state(PrayerStates.selecting_category)
    logger.info('State set to selecting_category')

@router.callback_query(PrayerStates.selecting_category, F.data.startswith("category_"))
async def process_category_selection(callback_query: CallbackQuery, state: FSMContext):
    from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
    
    await callback_query.answer(show_alert=False)
    
    # Extract category ID from callback data
    category_id = int(callback_query.data.split("_")[1])
    category_name = get_category_by_id(category_id)
    
    # Store selected category in state
    await state.update_data(selected_category_id=category_id, selected_category_name=category_name)
    
    # Create keyboard with back button
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text='üè† –î–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é', callback_data='main_menu')]
    ])
    
    await callback_query.message.answer(
        f"–í–∏ –æ–±—Ä–∞–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é: <b>{category_name}</b>\n–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –≤–∞—à—É –º–æ–ª–∏—Ç–≤—É:",
        reply_markup=keyboard
    )
    
    # Move to next state
    await state.set_state(PrayerStates.expecting_prayer)
    logger.info('State set to expecting_prayer')

@router.message(PrayerStates.expecting_prayer)
async def capture_prayer(message: Message, state: FSMContext):
    from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
    
    user_id = message.from_user.id
    username = message.from_user.username or 'unknown'
    first_name = message.from_user.first_name or ""
    last_name = message.from_user.last_name or ""
    prayer_text = message.text
    
    # Get state data
    state_data = await state.get_data()

    # Check if we're editing an existing prayer
    if 'edit_prayer_id' in state_data:
        prayer_id = state_data['edit_prayer_id']
        
        # Check if we need to update the category
        category_id = state_data.get('selected_category_id', None)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –º–æ–ª–∏—Ç–≤—É –≤ –ë–î
        update_prayer(prayer_id, prayer_text, category_id)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text='üè† –î–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é', callback_data='main_menu')]
        ])
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–º, —á—Ç–æ –±—ã–ª–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ
        await message.answer(
            f"‚úÖ <b>–ú–æ–ª–∏—Ç–≤—É –æ–Ω–æ–≤–ª–µ–Ω–æ!</b>",
            reply_markup=keyboard
        )
    else:
        # Get selected category from state
        category_id = state_data.get('selected_category_id')
        category_name = state_data.get('selected_category_name', '–ù–µ–≤—ñ–¥–æ–º–∞')
        
        # Insert new prayer with category
        insert_prayer(user_id, username, prayer_text, category_id, first_name, last_name)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text='üè† –î–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é', callback_data='main_menu')]
        ])
        
        await message.answer(
            f"‚úÖ <b>–ú–æ–ª–∏—Ç–≤—É –∑–∞–ø–∏—Å–∞–Ω–æ –≤ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó {category_name}.</b>",
            reply_markup=keyboard
        )

    await state.clear()

@router.message(Command("my_prayers"))
async def my_prayers(message: Message):
    from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
    
    user_id = message.from_user.id
    logger.info('Fetching prayers for user_id: %s', user_id)
    prayers = fetch_prayers(user_id)
    
    if not prayers:
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text='üè† –î–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é', callback_data='main_menu')]
        ])
        
        await message.answer('–£ –≤–∞—Å –Ω–µ–º–∞—î –∑–∞–ø–∏—Å–∞–Ω–∏—Ö –º–æ–ª–∏—Ç–æ–≤.', reply_markup=keyboard)
        return

    # Telegram message length limit (4096 characters)
    MAX_MESSAGE_LENGTH = 4000  # Slightly less than the limit for safety
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –º–æ–ª–∏—Ç–≤—ã
    for prayer_id, prayer_text, category_name in prayers:
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π —Å –º–æ–ª–∏—Ç–≤–æ–π
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text='–†–µ–¥–∞–≥—É–≤–∞—Ç–∏', callback_data=f'edit_{prayer_id}'),
                InlineKeyboardButton(text='–í–∏–¥–∞–ª–∏—Ç–∏', callback_data=f'delete_{prayer_id}')
            ]
        ])
        
        # Add category to message
        category_info = f"<b>–ö–∞—Ç–µ–≥–æ—Ä—ñ—è: {category_name or '–ù–µ –≤–∫–∞–∑–∞–Ω–∞'}</b>\n\n"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É —Å–æ–æ–±—â–µ–Ω–∏—è
        if len(prayer_text) + len(category_info) <= MAX_MESSAGE_LENGTH:
            # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–≥–æ –ø–æ–ª–Ω–æ—Å—Ç—å—é —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
            await message.answer(f"{category_info}{prayer_text}", reply_markup=keyboard)
        else:
            # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ, —Ä–∞–∑–±–∏–≤–∞–µ–º –µ–≥–æ –Ω–∞ —á–∞—Å—Ç–∏
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–Ω–∞—á–∞–ª–∞ –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å –∫–∞—Ç–µ–≥–æ—Ä–∏–µ–π
            await message.answer(category_info)
            
            # –†–∞–∑–±–∏–≤–∞–µ–º –¥–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –Ω–∞ —á–∞—Å—Ç–∏
            remaining_text = prayer_text
            part_number = 1
            total_parts = (len(prayer_text) + MAX_MESSAGE_LENGTH - 1) // MAX_MESSAGE_LENGTH
            
            while remaining_text:
                # –í—ã—á–∏—Å–ª—è–µ–º —Ä–∞–∑–º–µ—Ä —Å–ª–µ–¥—É—é—â–µ–π —á–∞—Å—Ç–∏
                chunk_size = min(MAX_MESSAGE_LENGTH, len(remaining_text))
                # –ò–∑–≤–ª–µ–∫–∞–µ–º —á–∞—Å—Ç—å —Ç–µ–∫—Å—Ç–∞
                chunk = remaining_text[:chunk_size]
                # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Å—Ç–∞–≤—à–∏–π—Å—è —Ç–µ–∫—Å—Ç
                remaining_text = remaining_text[chunk_size:]
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Å—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
                part_info = f"<i>–ß–∞—Å—Ç–∏–Ω–∞ {part_number}/{total_parts}</i>\n\n" if total_parts > 1 else ""
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —á–∞—Å—Ç—å —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π, –æ—Å—Ç–∞–ª—å–Ω—ã–µ –±–µ–∑ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
                if not remaining_text:  # –ï—Å–ª–∏ —ç—Ç–æ –ø–æ—Å–ª–µ–¥–Ω—è—è —á–∞—Å—Ç—å
                    await message.answer(f"{part_info}{chunk}", reply_markup=keyboard)
                else:
                    await message.answer(f"{part_info}{chunk}")
                
                part_number += 1
    
    # –û—Ç–¥–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text='üè† –î–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é', callback_data='main_menu')]
    ])
    await message.answer('‚¨ÜÔ∏è –í–∞—à—ñ –º–æ–ª–∏—Ç–≤–∏ ‚¨ÜÔ∏è', reply_markup=keyboard)

@router.callback_query(F.data.startswith(('edit_', 'delete_')))
async def prayer_callback(callback_query: CallbackQuery, state: FSMContext):
    from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
    
    await callback_query.answer(show_alert=False)
    data = callback_query.data

    if data.startswith('edit_'):
        prayer_id = int(data.split('_')[1])
        result = get_prayer_by_id(prayer_id)
        
        if result:
            prayer_text, category_id, category_name = result
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É –º–æ–ª–∏—Ç–≤—ã –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            if len(prayer_text) > 3072:
                # –ú–æ–ª–∏—Ç–≤–∞ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–∞—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤ Telegram
                # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é
                keyboard = InlineKeyboardMarkup(inline_keyboard=[
                    [
                        InlineKeyboardButton(text='–í–∏–¥–∞–ª–∏—Ç–∏ —Ü—é –º–æ–ª–∏—Ç–≤—É', callback_data=f'delete_{prayer_id}'),
                        InlineKeyboardButton(text='–°–∫–∞—Å—É–≤–∞—Ç–∏', callback_data='cancel_edit')
                    ],
                    [InlineKeyboardButton(text='üè† –î–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é', callback_data='main_menu')]
                ])
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                await callback_query.message.answer(
                    text=f"‚ö†Ô∏è <b>–¶—è –º–æ–ª–∏—Ç–≤–∞ –∑–∞–Ω–∞–¥—Ç–æ –¥–æ–≤–≥–∞ –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è</b>\n\n"
                         f"–ß–µ—Ä–µ–∑ –æ–±–º–µ–∂–µ–Ω–Ω—è Telegram, –¥—É–∂–µ –¥–æ–≤–≥—ñ –º–æ–ª–∏—Ç–≤–∏ –Ω–µ–º–æ–∂–ª–∏–≤–æ —Ä–µ–¥–∞–≥—É–≤–∞—Ç–∏.\n"
                         f"–í–∏ –º–æ–∂–µ—Ç–µ –≤–∏–¥–∞–ª–∏—Ç–∏ —Ü—é –º–æ–ª–∏—Ç–≤—É —Ç–∞ —Å—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤—É –∑–∞–º—ñ—Å—Ç—å –Ω–µ—ó.",
                    reply_markup=keyboard
                )
            else:
                # Offer to choose a new category or keep the existing one
                categories = get_all_categories()
                
                # Create keyboard with categories and cancel button
                buttons = []
                for cat_id, cat_name in categories:
                    if cat_id == category_id:
                        # Mark the current category
                        buttons.append([InlineKeyboardButton(text=f"‚úì {cat_name}", callback_data=f'editcat_{prayer_id}_{cat_id}')])
                    else:
                        buttons.append([InlineKeyboardButton(text=cat_name, callback_data=f'editcat_{prayer_id}_{cat_id}')])
                
                buttons.append([InlineKeyboardButton(text='–°–∫–∞—Å—É–≤–∞—Ç–∏', callback_data='cancel_edit')])
                buttons.append([InlineKeyboardButton(text='üè† –î–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é', callback_data='main_menu')])
                
                keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                await callback_query.message.answer(
                    text=f"‚úèÔ∏è <b>–†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –º–æ–ª–∏—Ç–≤–∏</b>\n\n"
                         f"–ü–æ—Ç–æ—á–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è: <b>{category_name or '–ù–µ –≤–∫–∞–∑–∞–Ω–∞'}</b>\n\n"
                         f"–û–±–µ—Ä—ñ—Ç—å –Ω–æ–≤—É –∫–∞—Ç–µ–≥–æ—Ä—ñ—é –∞–±–æ –∑–∞–ª–∏—à—Ç–µ –ø–æ—Ç–æ—á–Ω—É:",
                    reply_markup=keyboard
                )
        else:
            # –ú–æ–ª–∏—Ç–≤–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text='üè† –î–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é', callback_data='main_menu')]
            ])
            
            await callback_query.message.answer(
                text='–í–∏–±–∞—á—Ç–µ, –º–æ–ª–∏—Ç–≤—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.',
                reply_markup=keyboard
            )

    elif data.startswith('delete_'):
        prayer_id = int(data.split('_')[1])
        delete_prayer(prayer_id)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text='üè† –î–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é', callback_data='main_menu')]
        ])
        
        await callback_query.message.answer(
            text='–ú–æ–ª–∏—Ç–≤—É –≤–∏–¥–∞–ª–µ–Ω–æ.',
            reply_markup=keyboard
        )

@router.callback_query(F.data.startswith("editcat_"))
async def edit_prayer_category(callback_query: CallbackQuery, state: FSMContext):
    from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
    
    # Parse the callback data to get prayer_id and category_id
    _, prayer_id, category_id = callback_query.data.split("_")
    prayer_id = int(prayer_id)
    category_id = int(category_id)
    
    # Get the category name
    category_name = get_category_by_id(category_id)
    
    # Get the prayer text
    result = get_prayer_by_id(prayer_id)
    if result:
        prayer_text = result[0]
        
        # Store the prayer ID and category in state
        await state.update_data(
            edit_prayer_id=prayer_id,
            selected_category_id=category_id,
            selected_category_name=category_name
        )
        
        # Create keyboard with back button
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text='–°–∫–∞—Å—É–≤–∞—Ç–∏', callback_data='cancel_edit')],
            [InlineKeyboardButton(text='üè† –î–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é', callback_data='main_menu')]
        ])
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–∫—É—â–∏–º —Ç–µ–∫—Å—Ç–æ–º –∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π
        await callback_query.message.answer(
            text=f"‚úèÔ∏è <b>–†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –º–æ–ª–∏—Ç–≤–∏ –≤ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó {category_name}</b>\n\n"
                 f"{prayer_text}\n\n"
                 f"<i>–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å –Ω–æ–≤–∏–π —Ç–µ–∫—Å—Ç –º–æ–ª–∏—Ç–≤–∏ –∞–±–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –°–∫–∞—Å—É–≤–∞—Ç–∏.</i>",
            reply_markup=keyboard
        )
        
        # Set state to expect prayer text
        await state.set_state(PrayerStates.expecting_prayer)
    else:
        # Prayer not found
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text='üè† –î–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é', callback_data='main_menu')]
        ])
        
        await callback_query.message.answer(
            text='–í–∏–±–∞—á—Ç–µ, –º–æ–ª–∏—Ç–≤—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.',
            reply_markup=keyboard
        )
    
    await callback_query.answer(show_alert=False)

@router.callback_query(F.data == "cancel_edit")
async def cancel_edit(callback_query: CallbackQuery, state: FSMContext):
    from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
    
    await state.clear()
    await callback_query.answer("–†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è —Å–∫–∞—Å–æ–≤–∞–Ω–æ", show_alert=True)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text='üè† –î–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é', callback_data='main_menu')]
    ])
    
    await callback_query.message.answer(
        "–†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –º–æ–ª–∏—Ç–≤–∏ —Å–∫–∞—Å–æ–≤–∞–Ω–æ.",
        reply_markup=keyboard
    )

@router.callback_query(F.data == "show_my_prayers")
async def show_my_prayers(callback_query: CallbackQuery):
    from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
    
    user_id = callback_query.from_user.id
    logger.info('Fetching prayers for user_id: %s', user_id)
    prayers = fetch_prayers(user_id)
    
    if not prayers:
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text='üè† –î–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é', callback_data='main_menu')]
        ])
        
        await callback_query.message.answer(
            '–£ –≤–∞—Å –Ω–µ–º–∞—î –∑–∞–ø–∏—Å–∞–Ω–∏—Ö –º–æ–ª–∏—Ç–æ–≤.',
            reply_markup=keyboard
        )
        return

    # Telegram message length limit (4096 characters)
    MAX_MESSAGE_LENGTH = 4000  # Slightly less than the limit for safety
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –º–æ–ª–∏—Ç–≤—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    for prayer_id, prayer_text, category_name in prayers:
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π —Å –º–æ–ª–∏—Ç–≤–æ–π
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text='–†–µ–¥–∞–≥—É–≤–∞—Ç–∏', callback_data=f'edit_{prayer_id}'),
                InlineKeyboardButton(text='–í–∏–¥–∞–ª–∏—Ç–∏', callback_data=f'delete_{prayer_id}')
            ]
        ])
        
        # Add category to message
        category_info = f"<b>–ö–∞—Ç–µ–≥–æ—Ä—ñ—è: {category_name or '–ù–µ –≤–∫–∞–∑–∞–Ω–∞'}</b>\n\n"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É —Å–æ–æ–±—â–µ–Ω–∏—è
        if len(prayer_text) + len(category_info) <= MAX_MESSAGE_LENGTH:
            # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–≥–æ –ø–æ–ª–Ω–æ—Å—Ç—å—é —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
            await callback_query.message.answer(f"{category_info}{prayer_text}", reply_markup=keyboard)
        else:
            # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ, —Ä–∞–∑–±–∏–≤–∞–µ–º –µ–≥–æ –Ω–∞ —á–∞—Å—Ç–∏
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–Ω–∞—á–∞–ª–∞ –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å –∫–∞—Ç–µ–≥–æ—Ä–∏–µ–π
            await callback_query.message.answer(category_info)
            
            # –†–∞–∑–±–∏–≤–∞–µ–º –¥–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –Ω–∞ —á–∞—Å—Ç–∏
            remaining_text = prayer_text
            part_number = 1
            total_parts = (len(prayer_text) + MAX_MESSAGE_LENGTH - 1) // MAX_MESSAGE_LENGTH
            
            while remaining_text:
                # –í—ã—á–∏—Å–ª—è–µ–º —Ä–∞–∑–º–µ—Ä —Å–ª–µ–¥—É—é—â–µ–π —á–∞—Å—Ç–∏
                chunk_size = min(MAX_MESSAGE_LENGTH, len(remaining_text))
                # –ò–∑–≤–ª–µ–∫–∞–µ–º —á–∞—Å—Ç—å —Ç–µ–∫—Å—Ç–∞
                chunk = remaining_text[:chunk_size]
                # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Å—Ç–∞–≤—à–∏–π—Å—è —Ç–µ–∫—Å—Ç
                remaining_text = remaining_text[chunk_size:]
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Å—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
                part_info = f"<i>–ß–∞—Å—Ç–∏–Ω–∞ {part_number}/{total_parts}</i>\n\n" if total_parts > 1 else ""
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —á–∞—Å—Ç—å —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π, –æ—Å—Ç–∞–ª—å–Ω—ã–µ –±–µ–∑ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
                if not remaining_text:  # –ï—Å–ª–∏ —ç—Ç–æ –ø–æ—Å–ª–µ–¥–Ω—è—è —á–∞—Å—Ç—å
                    await callback_query.message.answer(f"{part_info}{chunk}", reply_markup=keyboard)
                else:
                    await callback_query.message.answer(f"{part_info}{chunk}")
                
                part_number += 1
    
    # –û—Ç–¥–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text='üè† –î–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é', callback_data='main_menu')]
    ])
    await callback_query.message.answer('‚¨ÜÔ∏è –í–∞—à—ñ –º–æ–ª–∏—Ç–≤–∏ ‚¨ÜÔ∏è', reply_markup=keyboard)

    await callback_query.answer(show_alert=False)

@router.callback_query(F.data == "show_all_prayers")
async def show_all_prayers(callback_query: CallbackQuery):
    await show_prayers_page(callback_query, 0)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤—Å–µ—Ö –º–æ–ª–∏—Ç–≤ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
async def show_prayers_page(callback_query: CallbackQuery, offset=0, batch_size=5):
    from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
    
    logger.info(f'Fetching prayers with offset={offset}, batch_size={batch_size}')
    
    # –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–ª–∏—Ç–≤ –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    total_prayers = count_all_prayers()
    
    if total_prayers == 0:
        # –ï—Å–ª–∏ –º–æ–ª–∏—Ç–≤ –Ω–µ—Ç
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text='üè† –î–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é', callback_data='main_menu')]
        ])
        
        await callback_query.message.answer(
            '–ü–æ–∫–∏ —â–æ –Ω–µ–º–∞—î –∂–æ–¥–Ω–æ—ó –º–æ–ª–∏—Ç–≤–∏.',
            reply_markup=keyboard
        )
        await callback_query.answer(show_alert=False)
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —á–∞—Å—Ç—å –º–æ–ª–∏—Ç–≤ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
    prayers = fetch_all_prayers(limit=batch_size, offset=offset)
    
    # Telegram message length limit (4096 characters)
    MAX_MESSAGE_LENGTH = 4000  # Slightly less than the limit for safety
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–ª–∏—Ç–≤—ã –∏–∑ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    for prayer in prayers:
        prayer_text = prayer[0]  # –¢–µ–∫—Å—Ç –º–æ–ª–∏—Ç–≤—ã - –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç
        category_name = prayer[5] if len(prayer) > 5 else "–ù–µ –≤–∫–∞–∑–∞–Ω–∞"  # Category is the sixth element
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é, –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º username, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
        author = "–ê–Ω–æ–Ω—ñ–º"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–æ–ª–µ–π first_name –∏ last_name
        if len(prayer) > 3:  # –ï—Å–ª–∏ –µ—Å—Ç—å –ø–æ–ª—è first_name
            first_name = prayer[3] if prayer[3] else ""
            last_name = ""
            if len(prayer) > 4:  # –ï—Å–ª–∏ –µ—Å—Ç—å –ø–æ–ª–µ last_name
                last_name = prayer[4] if prayer[4] else ""
            
            # –ï—Å–ª–∏ –µ—Å—Ç—å –∏–º—è –∏–ª–∏ —Ñ–∞–º–∏–ª–∏—è, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Ö
            if first_name or last_name:
                author = f"{first_name} {last_name}".strip()
        
        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –∞–≤—Ç–æ—Ä–∞ –∏–∑ –∏–º–µ–Ω–∏ –∏ —Ñ–∞–º–∏–ª–∏–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º username
        if author == "–ê–Ω–æ–Ω—ñ–º" and prayer[1]:
            author = prayer[1]
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
        created_at = ""
        if len(prayer) > 2 and prayer[2]:
            try:
                # –ü–æ–ø—ã—Ç–∫–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å —Å—Ç—Ä–æ–∫—É –¥–∞—Ç—ã –≤ –æ–±—ä–µ–∫—Ç datetime
                date_obj = datetime.fromisoformat(prayer[2])
                # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã –≤ –±–æ–ª–µ–µ —á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥
                created_at = f" ({date_obj.strftime('%d.%m.%Y')})"
            except:
                # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –¥–∞—Ç—É, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
                pass
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏—è
        header = f"<b>–ú–æ–ª–∏—Ç–≤–∞ –≤—ñ–¥ {author}{created_at}</b>\n<b>–ö–∞—Ç–µ–≥–æ—Ä—ñ—è: {category_name}</b>\n\n"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É —Å–æ–æ–±—â–µ–Ω–∏—è
        if len(prayer_text) + len(header) <= MAX_MESSAGE_LENGTH:
            # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–≥–æ –ø–æ–ª–Ω–æ—Å—Ç—å—é
            await callback_query.message.answer(f"{header}{prayer_text}")
        else:
            # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ, —Ä–∞–∑–±–∏–≤–∞–µ–º –µ–≥–æ –Ω–∞ —á–∞—Å—Ç–∏
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–Ω–∞—á–∞–ª–∞ –∑–∞–≥–æ–ª–æ–≤–æ–∫
            await callback_query.message.answer(header)
            
            # –†–∞–∑–±–∏–≤–∞–µ–º –¥–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –Ω–∞ —á–∞—Å—Ç–∏
            remaining_text = prayer_text
            part_number = 1
            total_parts = (len(prayer_text) + MAX_MESSAGE_LENGTH - 1) // MAX_MESSAGE_LENGTH
            
            while remaining_text:
                # –í—ã—á–∏—Å–ª—è–µ–º —Ä–∞–∑–º–µ—Ä —Å–ª–µ–¥—É—é—â–µ–π —á–∞—Å—Ç–∏
                chunk_size = min(MAX_MESSAGE_LENGTH, len(remaining_text))
                # –ò–∑–≤–ª–µ–∫–∞–µ–º —á–∞—Å—Ç—å —Ç–µ–∫—Å—Ç–∞
                chunk = remaining_text[:chunk_size]
                # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Å—Ç–∞–≤—à–∏–π—Å—è —Ç–µ–∫—Å—Ç
                remaining_text = remaining_text[chunk_size:]
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Å—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
                part_info = f"<i>–ß–∞—Å—Ç–∏–Ω–∞ {part_number}/{total_parts}</i>\n\n" if total_parts > 1 else ""
                await callback_query.message.answer(f"{part_info}{chunk}")
                part_number += 1
    
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    nav_buttons = []
    
    # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥" –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –ø–µ—Ä–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
    if offset > 0:
        prev_offset = max(0, offset - batch_size)
        nav_buttons.append(
            InlineKeyboardButton(text='‚¨ÖÔ∏è –ü–æ–ø–µ—Ä–µ–¥–Ω—ñ', callback_data=f'prayers_page_{prev_offset}')
        )
    
    # –ö–Ω–æ–ø–∫–∞ "–î–∞–ª–µ–µ" –µ—Å–ª–∏ –µ—Å—Ç—å –µ—â–µ –º–æ–ª–∏—Ç–≤—ã
    if offset + batch_size < total_prayers:
        next_offset = offset + batch_size
        nav_buttons.append(
            InlineKeyboardButton(text='–ù–∞—Å—Ç—É–ø–Ω—ñ ‚û°Ô∏è', callback_data=f'prayers_page_{next_offset}')
        )
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    start_idx = offset + 1
    end_idx = min(offset + batch_size, total_prayers)
    page_info = f"–ú–æ–ª–∏—Ç–≤–∏ {start_idx}-{end_idx} –∑ {total_prayers}"
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard_rows = []
    if nav_buttons:
        keyboard_rows.append(nav_buttons)
    keyboard_rows.append([InlineKeyboardButton(text='üè† –î–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é', callback_data='main_menu')])
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_rows)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    await callback_query.message.answer(page_info, reply_markup=keyboard)
    
    # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback_query, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å —á–∞—Å—ã –∑–∞–≥—Ä—É–∑–∫–∏
    await callback_query.answer(show_alert=False)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –º–µ–∂–¥—É —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º–∏ –º–æ–ª–∏—Ç–≤
@router.callback_query(F.data.startswith("prayers_page_"))
async def handle_prayer_pagination(callback_query: CallbackQuery):
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏–∑ callback_data
    offset = int(callback_query.data.split("_")[-1])
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
    await show_prayers_page(callback_query, offset)

def register_handlers(dp: Dispatcher):
    # Include the router in the dispatcher
    dp.include_router(router)
